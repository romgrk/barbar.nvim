*barbar.txt*                      Nvim


                      barbar.vim    by Rom Grk


Help on barbar.nvim                                        *barbar* *barbar.nvim*

1. Intro                        |barbar-intro|
2. Mappings & Commands          |barbar-mappings| |barbar-commands|
3. Highlights                   |barbar-highlights|
4. Settings                     |barbar-settings|
5. Integrations                 |barbar-integrations|

==============================================================================
1. Intro                                                        *barbar-intro*

Barbar is a tabline plugin. It's called Barbar because it deals with the bar
at the top of your window. And it does it well so it's more than a bar. Barbar.

==============================================================================
2. Mappings & Commands                     *barbar-mappings* *barbar-commands*

The plugin doesn't provide default mappings as there isn't any standard. The
list below is the mappings I use. It is recommended to use the `BufferClose`
command to close buffers instead of `bdelete` because it will not mess your
window layout.

The name of each command should be descriptive enough for you to use it.
>
    " Move to previous/next
    nnoremap <silent>    <A-,> <Cmd>BufferPrevious<CR>
    nnoremap <silent>    <A-.> <Cmd>BufferNext<CR>

    " Re-order to previous/next
    nnoremap <silent>    <A-<> <Cmd>BufferMovePrevious<CR>
    nnoremap <silent>    <A->> <Cmd>BufferMoveNext<CR>

    " Goto buffer in position...
    nnoremap <silent>    <A-1> <Cmd>BufferGoto 1<CR>
    nnoremap <silent>    <A-2> <Cmd>BufferGoto 2<CR>
    nnoremap <silent>    <A-3> <Cmd>BufferGoto 3<CR>
    nnoremap <silent>    <A-4> <Cmd>BufferGoto 4<CR>
    nnoremap <silent>    <A-5> <Cmd>BufferGoto 5<CR>
    nnoremap <silent>    <A-6> <Cmd>BufferGoto 6<CR>
    nnoremap <silent>    <A-7> <Cmd>BufferGoto 7<CR>
    nnoremap <silent>    <A-8> <Cmd>BufferGoto 8<CR>
    nnoremap <silent>    <A-9> <Cmd>BufferGoto 9<CR>
    nnoremap <silent>    <A-0> <Cmd>BufferLast<CR>

    " Pin/unpin buffer
    nnoremap <silent>    <A-p> <Cmd>BufferPin<CR>

    " Close buffer
    nnoremap <silent>    <A-c> <Cmd>BufferClose<CR>

    " Wipeout buffer
    "                          :BufferWipeout
    " Close commands
    "                          :BufferCloseAllButCurrent
    "                          :BufferCloseAllButVisible
    "                          :BufferCloseAllButPinned
    "                          :BufferCloseAllButCurrentOrPinned
    "                          :BufferCloseBuffersLeft
    "                          :BufferCloseBuffersRight

    " Magic buffer-picking mode
    nnoremap <silent> <C-p>    <Cmd>BufferPick<CR>
    nnoremap <silent> <C-p>    <Cmd>BufferPickDelete<CR>

    " Sort automatically by...
    nnoremap <silent> <Space>bb <Cmd>BufferOrderByBufferNumber<CR>
    nnoremap <silent> <Space>bd <Cmd>BufferOrderByDirectory<CR>
    nnoremap <silent> <Space>bl <Cmd>BufferOrderByLanguage<CR>
    nnoremap <silent> <Space>bw <Cmd>BufferOrderByWindowNumber<CR>

    " Other:
    " :BarbarEnable - enables barbar (enabled by default)
    " :BarbarDisable - very bad command, should never be used
<

==============================================================================
3. Highlights                                              *barbar-highlights*
~
Highlight groups are created in this way: `Buffer<STATUS><PART>`.

`<STATUS>`   Meaning
---------  --------------------------------------------------
`Alternate`  The |alternate-file|.
`Current`    The current buffer.
`Inactive`   |hidden-buffer|s and |inactive-buffer|s.
`Visible`    |active-buffer|s which are not alternate or current.

`<PART>`  Meaning
------  -----------------------
`ERROR`   Diagnostic errors.
`HINT`    Diagnostic hints.
`Icon`    The filetype icon
        (when `icons.filetype == {custom_colors = true, enabled = true}`).
`Index`   The buffer's position in the tabline.
`Number`  The |bufnr()|.
`INFO`    Diagnostic info.
`Mod`     When the buffer is modified.
`Sign`    The separator between buffers.
`Target`  The letter in buffer-pick mode.
`WARN`    Diagnostic warnings.

==============================================================================
4. Settings                                                     *barbar-setup*

`barbar`.setup({options})                                       *barbar.setup()*

  To configure barbar or enable it for the first time, you must call this
  `setup` function. The valid {options} are listed below.

  Lua example: >
    require'barbar'.setup {
      auto_hide = true,
      clickable = false,
      icons = {current = {filetype = {enabled = false}}},
      maximum_padding = math.huge,
    }
<

  Vimscript example (see |:lua-heredoc| for more details): >
    lua << EOF
    require'barbar'.setup {
      auto_hide = true,
      clickable = false,
      icons = {current = {filetype = {enabled = false}}},
      maximum_padding = math.huge,
    }
    EOF
<
                                                      *barbar-setup.animation*
animation ~
  `boolean`  (default: `true`)
  Enables animations if `true`.

                                                      *barbar-setup.auto_hide*
auto_hide ~
  `boolean`  (default: `false`)
  Enable/disable auto-hiding the tab bar when there is a single buffer.

                                                      *barbar-setup.clickable*
clickable ~
  `boolean`  (default: `true`)
  If set, you can left-click on a tab to switch to that buffer, and
  middle-click to delete it.

                                                     *barbar-setup.exclude_ft*
exclude_ft ~
  `string[]`  (default: `{}`)
  Excludes filetypes from appearing in the tabs.

                                                   *barbar-setup.exclude_name*
exclude_name ~
  `string[]`  (default: `{}`)
  Excludes buffers matching name from appearing in the tabs.

                                                 *barbar-setup.focus_on_close*
focus_on_close ~
  `'left'|'right'`  (default: `'left'`)
  A buffer to this direction will be focused (if it exists) when closing the
  current buffer.

                                                           *barbar-setup.hide*
hide ~
  Sets which elements are hidden in the bufferline. Possible options are:

                                                 *barbar-setup.hide.alternate*
  hide.alternate ~
    `boolean`  (default: `false`)
    Controls the visibility of the |alternate-file|.
    |barbar-setup.highlight_alternate| must be `true`.

                                                   *barbar-setup.hide.current*
  hide.current ~
    `boolean`  (default: `false`)
    Controls the visibility of the current buffer.

                                                *barbar-setup.hide.extensions*
  hide.extensions ~
    `boolean`  (default: `false`)
    `extensions`, which controls the visibility of file extensions;

                                                  *barbar-setup.hide.inactive*
  hide.inactive ~
    `boolean`  (default: `false`)
    Controls visibility of |hidden-buffer|s and |inactive-buffer|s.

                                                   *barbar-setup.hide.visible*
  hide.visible ~
    `boolean`  (default: `false`)
    Controls visibility of |active-buffer|s.
    |barbar-setup.highlight_visible| must be `true`.

                                            *barbar-setup.highlight_alternate*
highlight_alternate ~
  `boolean`  (default: `false`)
  Enables highlighting of alternate buffers.

                                  *barbar-setup.highlight_inactive_file_icons*
highlight_inactive_file_icons ~
  `boolean`  (default: `false`)
  Enables highlighting the file icons of inactive buffers.

                                              *barbar-setup.highlight_visible*
highlight_visible ~
  `boolean`  (default: `true`)
  Enables highlighting of visible buffers.

                                                          *barbar-setup.icons*
icons ~
  `table`
  Controls the icons rendered on each tab. The base options are:

                                             *barbar-setup.icons.buffer_index*
  icons.buffer_index ~
    `boolean`  (default: `false`)
    if `true`, show the index of the buffer with respect to the ordering of
    the buffers in the tabline.

                                            *barbar-setup.icons.buffer_number*
  icons.buffer_number ~
    `boolean`  (default: `false`)
    If `true`, show the `bufnr` for the associated buffer.

                                                    *barbar-setup.icons.button*
  icons.button ~
    `false | string`  (default: `'Ôôï'`)
    The button which is clicked to close / save a buffer, or indicate that it
    is pinned. Use `false` to disable it.

                                              *barbar-setup.icons.diagnostics*
  icons.diagnostics ~
    `{[DiagnosticSeverity]: {enabled: boolean, icon: string}}`
    Default: >
    {
       [vim.diagnostic.severity.ERROR] = {enabled = false, icon = '‚ìç '},
       [vim.diagnostic.severity.HINT] = {enabled = false, icon = 'üí°'},
       [vim.diagnostic.severity.INFO] = {enabled = false, icon = '‚ìò '},
       [vim.diagnostic.severity.WARN] = {enabled = false, icon = '‚ö†Ô∏è '},
    }
<   Enables or disables showing diagnostics in the bufferline. The options
    are:
    - `enabled`, whether this diagnostics of this severity are shown in the
      bufferline.
    - `icon`, which controls what icon accompanies the number of diagnostics.

                                   *barbar-setup.icons.filetype.custom_colors*
  icons.filetype.custom_colors ~
    `boolean`  (default: `false`)
    If `true`, the `Buffer<status>Icon` color will be used for icon colors.

                                         *barbar-setup.icons.filetype.enabled*
  icons.filetype.enabled ~
    `boolean`  (default: `true`)
    Filetype `true`, show the `devicons` for the associated buffer's
    `filetype`.

                                                *barbar-setup.icons.separator*
  icons.separator ~
    `{left: string, right: string}`  (default: `{left = '‚ñé', right = ''}`)
    The separator between buffers in the tabline.

  Example: >
    -- Show the file icon, a left separator, and ERROR/WARN diagnostics
    require'barbar'.setup {icons = {
      buffer_index = false,
      buffer_number = false,
      button = 'Ôôï',
      diagnostics = {{enabled = true}, {enabled = true}},
      filetype = {enabled = true},
      separator = {left = '‚ñé'},
    }}
<

  You can also customize icons of 'modified' and pinned buffers:

                                                 *barbar-setup.icons.modified*
  icons.modified ~
    `table`  (default: `{button = '‚óè'}`)
    The icons which should be used for a 'modified' buffer.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc)

                                                   *barbar-setup.icons.pinned*
  icons.pinned ~
    `table`  (default: `{button = 'Ôì≤'}`)
    The icons which should be used for a pinned buffer.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc)

  Example: >
    require'barbar'.setup {icons = {
      modified = {separator = '‚ãÑ'},
      pinned = {button = 'Ô§Ç'},
    }}
<

  Lastly, you can customize icons based on the visibility of a buffer:

                                                *barbar-setup.icons.alternate*
  icons.alternate ~
    `table`
    The icons which should be used for the |alternate-file|.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc) as well as `modified` and `pinned`.

                                                  *barbar-setup.icons.current*
  icons.current ~
    `table`
    The icons which should be used for current buffer.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc) as well as `modified` and `pinned`.

                                                 *barbar-setup.icons.inactive*
  icons.inactive ~
    `table`  (default: `{separator = {left = '‚ñé', right = ''}}`)
    The icons which should be used for |hidden-buffer|s and |inactive-buffer|s.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc) as well as `modified` and `pinned`.

                                                  *barbar-setup.icons.visible*
  icons.visible ~
    `table`
    The icons which should be used for |active-buffer|s.
    Supports all the base options (e.g. `buffer_index`, `filetype.enabled`,
    etc) as well as `modified` and `pinned`.

  Example: >
    -- Enable file icons for alternate buffers.
    -- Enable buffer indices for current buffers.
    -- Override the button for inactive buffers.
    -- Disable buffer numbers for visible, modified buffers.
    require'barbar'.setup {icons = {
      alternate = {filetype = {enabled = false}},
      current = {buffer_index = true},
      inactive = {button = '√ó'},
      visible = {modified = {buffer_number = false}},
    }}
<

                                                *barbar-setup.insert_at_start*
insert_at_start ~
  `boolean`  (default: `false`)
  If true, new buffers appear at the start of the list. Default is to
  open after the current buffer.
  Has priority over |barbar-setup.insert_at_end|

                                                  *barbar-setup.insert_at_end*
insert_at_end ~
  `boolean`   (default: `false`)
  If true, new buffers appear at the end of the list. Default is to
  open after the current buffer.

                                                        *barbar-setup.letters*
letters ~
  `string`  (default: `'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP'`)
  New buffer letters are assigned in this order. This order is
  optimal for the qwerty keyboard layout but might need adjustement
  for other layouts.

                                                *barbar-setup.maximum_padding*
maximum_padding ~
  `int`  (default: `4`)
  Sets the maximum padding width with which to surround each tab.

                                                 *barbar-setup.maximum_length*
maximum_length ~
  `int`  (default: 30)
  Sets the maximum buffer name length.

                                                *barbar-setup.minimum_padding*
minimum_padding ~
  `int`  (default: `1`)
  Sets the minimum padding width with which to surround each tab.

                                                  *barbar-setup.no_name_title*
no_name_title ~
  `string`  (default: `nil`)
  Sets the name of unnamed buffers. By default format is `'[Buffer X]'`
  where `X` is the buffer number. But only a static string is accepted here.

                                               *barbar-setup.semantic_letters*
semantic_letters ~
  `boolean`  (default: `true`)
  If set, the letters for each buffer in buffer-pick mode will be
  assigned based on their name. Otherwise or in case all letters are
  already assigned, the behavior is to assign letters in order of
  usability (see order just below)

                                                       *barbar-setup.tabpages*
tabpages ~
  `boolean`  (default: `true`)
  Enable/disable current/total tabpages indicator (top right corner).

==============================================================================
5. Integrations                                          *barbar-integrations*

------------------------------------------------------------------------------
FILETREE PLUGINS

To ensure tabs begin with the shown buffer you can set an offset for the
tabline. Add this |autocmd| to your configuration: >
    vim.api.nvim_create_autocmd('FileType', {
      callback = function(tbl)
        local set_offset = require('bufferline.api').set_offset

        local bufwinid
        local last_width
        local autocmd = vim.api.nvim_create_autocmd('WinScrolled', {
          callback = function()
            bufwinid = bufwinid or vim.fn.bufwinid(tbl.buf)

            local width = vim.api.nvim_win_get_width(bufwinid)
            if width ~= last_width then
              set_offset(width, 'FileTree')
              last_width = width
            end
          end,
        })

        vim.api.nvim_create_autocmd('BufWipeout', {
          buffer = tbl.buf,
          callback = function()
            vim.api.nvim_del_autocmd(autocmd)
            set_offset(0)
          end,
          once = true,
        })
      end,
      pattern = 'NvimTree', -- or any other filetree's `ft`
    })
<

 vim:tw=78:ts=8:ft=help:norl:
