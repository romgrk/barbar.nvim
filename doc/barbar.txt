*barbar.txt*	Nvim


		  barbar.vim    by Rom Grk


Help on barbar.vim   			         		*barbar*

1. Intro                        |barbar-intro|
2. Mappings & Commands          |barbar-mappings| |barbar-commands|
3. Highlights                   |barbar-highlights|
4. Settings                     |barbar-settings|
5. Integrations                 |barbar-integrations|

==============================================================================
1. Intro                                                        *barbar-intro*

Barbar is a tabline plugin. It's called Barbar because it deals with the bar
at the top of your window. And it does it well so it's more than a bar. Barbar.

==============================================================================
2. Mappings & Commands                     *barbar-mappings* *barbar-commands*

The plugin doesn't provide default mappings as there isn't any standard. The
list below is the mappings I use. It is recommended to use the `BufferClose`
command to close buffers instead of `bdelete` because it will not mess your
window layout.

The name of each command should be descriptive enough for you to use it.

>
   " Move to previous/next
   nnoremap <silent>    <A-,> :BufferPrevious<CR>
   nnoremap <silent>    <A-.> :BufferNext<CR>

   " Re-order to previous/next
   nnoremap <silent>    <A-<> :BufferMovePrevious<CR>
   nnoremap <silent>    <A->> :BufferMoveNext<CR>

   " Goto buffer in position...
   nnoremap <silent>    <A-1> :BufferGoto 1<CR>
   nnoremap <silent>    <A-2> :BufferGoto 2<CR>
   nnoremap <silent>    <A-3> :BufferGoto 3<CR>
   nnoremap <silent>    <A-4> :BufferGoto 4<CR>
   nnoremap <silent>    <A-5> :BufferGoto 5<CR>
   nnoremap <silent>    <A-6> :BufferGoto 6<CR>
   nnoremap <silent>    <A-7> :BufferGoto 7<CR>
   nnoremap <silent>    <A-8> :BufferGoto 8<CR>
   nnoremap <silent>    <A-9> :BufferLast<CR>

   " Close buffer
   nnoremap <silent>    <A-c> :BufferClose<CR>

   " Wipeout buffer
   "                          :BufferWipeout<CR>
   " Close commands
   "                          :BufferCloseAllButCurrent<CR>
   "                          :BufferCloseBuffersLeft<CR>
   "                          :BufferCloseBuffersRight<CR>

   " Magic buffer-picking mode
   nnoremap <silent> <C-s>    :BufferPick<CR>

   " Sort automatically by...
   nnoremap <silent> <Space>bd :BufferOrderByDirectory<CR>
   nnoremap <silent> <Space>bl :BufferOrderByLanguage<CR>

   " Other:
   " :BarbarEnable - enables barbar (enabled by default)
   " :BarbarDisable - very bad command, should never be used
<

==============================================================================
3. Highlights                                              *barbar-highlights*
~

Here are the groups that you should define if you'd like to style Barbar.

>
   let fg_target = 'red'

   let fg_current  = s:fg(['Normal'], '#efefef')
   let fg_visible  = s:fg(['TabLineSel'], '#efefef')
   let fg_inactive = s:fg(['TabLineFill'], '#888888')

   let fg_modified  = s:fg(['WarningMsg'], '#E5AB0E')
   let fg_special  = s:fg(['Special'], '#599eff')
   let fg_subtle  = s:fg(['NonText', 'Comment'], '#555555')

   let bg_current  = s:bg(['Normal'], '#000000')
   let bg_visible  = s:bg(['TabLineSel', 'Normal'], '#000000')
   let bg_inactive = s:bg(['TabLineFill', 'StatusLine'], '#000000')

   " Meaning of terms:
   "
   " format: "Buffer" + status + part
   "
   " status:
   "     *Current: current buffer
   "     *Visible: visible but not current buffer
   "    *Inactive: invisible but not current buffer
   "
   " part:
   "        *Icon: filetype icon
   "       *Index: buffer index
   "         *Mod: when modified
   "        *Sign: the separator between buffers
   "      *Target: letter in buffer-picking mode
   "
   " BufferTabpages: tabpage indicator
   " BufferTabpageFill: filler after the buffer section

   call s:hi_all([
   \ ['BufferCurrent',        fg_current,  bg_current],
   \ ['BufferCurrentIndex',   fg_special,  bg_current],
   \ ['BufferCurrentMod',     fg_modified, bg_current],
   \ ['BufferCurrentSign',    fg_special,  bg_current],
   \ ['BufferCurrentTarget',  fg_target,   bg_current,   'bold'],
   \ ['BufferVisible',        fg_visible,  bg_visible],
   \ ['BufferVisibleIndex',   fg_visible,  bg_visible],
   \ ['BufferVisibleMod',     fg_modified, bg_visible],
   \ ['BufferVisibleSign',    fg_visible,  bg_visible],
   \ ['BufferVisibleTarget',  fg_target,   bg_visible,   'bold'],
   \ ['BufferInactive',       fg_inactive, bg_inactive],
   \ ['BufferInactiveIndex',  fg_subtle,   bg_inactive],
   \ ['BufferInactiveMod',    fg_modified, bg_inactive],
   \ ['BufferInactiveSign',   fg_subtle,   bg_inactive],
   \ ['BufferInactiveTarget', fg_target,   bg_inactive,  'bold'],
   \ ['BufferTabpages',       fg_special,  bg_inactive, 'bold'],
   \ ['BufferTabpageFill',    fg_inactive, bg_inactive],
   \ ])

   call s:hi_link([
   \ ['BufferCurrentIcon',  'BufferCurrent'],
   \ ['BufferVisibleIcon',  'BufferVisible'],
   \ ['BufferInactiveIcon', 'BufferInactive'],
   \ ])

   " NOTE: this is an example taken from the source, implementation of
   " s:fg(), s:bg(), s:hi_all() and s:hi_link() is left as an exercise
   " for the reader.
<

==============================================================================
4. Settings                                                  *barbar-settings*
~

					            *g:bufferline.animation*
`g:bufferline.animation`	boolean	(default v:true)

	Enables animations.

					            *g:bufferline.auto_hide*
`g:bufferline.auto_hide`	boolean	(default v:false)

	Enable/disable auto-hiding the tab bar when there is a single buffer.

                                                     *g:bufferline.tabpages*
`g:bufferline.tabpages`         boolean (default v:true)

        Enable/disable current/total tabpages indicator (top right corner).

							*g:bufferline.icons*
`g:bufferline.icons`		boolean, string	(default v:true)

	Controls if icons are rendered on each tab.

	- If `v:false`, show neither |devicons| nor buffer numbers.
	- If `v:true`, show |devicons| for each buffer's |'filetype'|.
	- If `"numbers"`, show the buffer number for current buffer.
	- If `"both"`, show the buffer number and |devicons|.

					   *g:bufferline.icon_custom_colors*
`g:bufferline.icon_custom_colors`	boolean, string (default v:false)

	Sets the icon's highlight group. If false, will use |devicons|
	colors. (see |barbar-highlights|)

			               *g:bufferline.icon_separator_active*
`g:bufferline.icon_separator_active`	string (default '▎')

	The separator for active and visible buffers.

			             *g:bufferline.icon_separator_inactive*
`g:bufferline.icon_separator_inactive`	string (default '▎')

	The separator for inactive buffers and the `BufferTabpageFill`.

					      *g:bufferline.icon_close_tab*
`g:bufferline.icon_close_tab`		string (default '')

	The button used to close the tab.

			             *g:bufferline.icon_close_tab_modified*
`g:bufferline.icon_close_tab_modified`		string (default '●')

	The button used to close the tab when it has been modified since
	last save.

						    *g:bufferline.closable*
`g:bufferline.closable`		boolean	(default v:true)

	Controls if close buttons are shown.

					    *g:bufferline.semantic_letters*
`g:bufferline.semantic_letters`		boolean	(default v:true)

	If set, the letters for each buffer in buffer-pick mode will be
	assigned based on their name. Otherwise or in case all letters are
	already assigned, the behavior is to assign letters in order of
	usability (see order just below)

					             *g:bufferline.letters*
`g:bufferline.letters`			string	(default
		     'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP')

	New buffer letters are assigned in this order. This order is
	optimal for the qwerty keyboard layout but might need adjustement
	for other layouts.
>
        let g:bufferline.letters =
	  \ 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP'
<

					           *g:bufferline.clickable*
`g:bufferline.clickable`		boolean	(default v:true)

	If set, you can left-click on a tab to switch to that buffer, and
	middle-click to delete it.
>
        let g:bufferline.clickable = v:true
<

					           *g:bufferline.maximum_padding*
`g:bufferline.maximum_padding`		int	(default 4)

	Sets the maximum padding width with which to surround each tab
>
        let g:bufferline.maximum_padding = 4
<

					           *g:bufferline.no_name_title*
`g:bufferline.no_name_title`		string (default empty)

	Sets the name of unnamed buffers. By default format is "[Buffer X]"
	where X is the buffer number. But only a static string is accepted here.
>
        let g:bufferline.no_name_title = v:null
<
==============================================================================
5. Integrations                                          *barbar-integrations*

with filetree plugins

bind open and close commands to (e.g. nvim-tree):

>
   local tree = {}
   tree.open = function ()
      require'bufferline.state'.set_offset(31)
      require'nvim-tree'.find_file(true)
   end

   tree.close = function ()
      require'bufferline.state'.set_offset(0)
      require'nvim-tree'.close()
   end

   return tree
<

 vim:tw=78:ts=8:ft=help:norl:
